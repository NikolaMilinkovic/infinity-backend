#!/usr/bin/env node

process.on('unhandledRejection', (reason, promise) => {
  console.error('> Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (err) => {
  console.error('> Uncaught Exception:', err);
});

/**
 * Module dependencies.
 */

const { betterErrorLog } = require('../utils/logMethods');
const { writeToLog } = require('../utils/s3/S3Methods');
const app = require('../app');
const debug = require('debug')('infinity-backend:server');
const http = require('http');
const { validateLastUpdated, getLastUpdated, getUpdatedMismatchedData } = require('../utils/helperMethods');
const User = require('../schemas/user');
const jwt = require('jsonwebtoken');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
console.log(`> Server started on port ${process.env.PORT || 3000}`);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require('socket.io')(server);
const logtail = require('../utils/logger');
app.locals.io = io;
io.on('connection', async (socket) => {
  try {
    socket.emit('requestLastUpdated', { message: 'Send lastUpdated data' });

    // GET USER FROM TOKEN IN ORDER TO LOG IT
    (async () => {
      try {
        const rawToken = socket.handshake.auth?.token;
        if (!rawToken) {
          console.log(`> Anonymous user connected: ${socket.id}`);
          return;
        }

        const token = rawToken.startsWith('Bearer ') ? rawToken.slice(7) : rawToken;
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const user = await User.findById(decoded.userId);

        if (user) {
          console.log(`> User connected: ${user.username} [${user._id}]`);
          await writeToLog({}, `[SOCKET] Connected to the server.`, token);
        } else {
          console.log(`> Invalid token user tried to connect: ${socket.id}`);
        }
      } catch (err) {
        console.log(`> Socket auth error: ${err.message}`);
      }
    })();

    // LAST UPDATED CHECK
    socket.on('lastUpdated', async (lastUpdatedData) => {
      try {
        await handleLastUpdatedValidation(lastUpdatedData, socket);
      } catch (err) {
        betterConsoleError('> Error validating lastUpdated:', err);
        socket.emit('lastUpdatedResponse', { isSynced: false, message: 'Server error during sync' });
      }
    });

    // DISCONNECT
    socket.on('disconnect', async (reason) => {
      console.log(`> User disconnected: [${socket.id}] - Reason: ${reason}`);

      try {
        const rawToken = socket.handshake.auth?.token;
        if (!rawToken) return;

        const token = rawToken.startsWith('Bearer ') ? rawToken.slice(7) : rawToken;
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const user = await User.findById(decoded.userId);

        if (user) {
          await writeToLog({}, `[SOCKET] Disconnected from server. Reason: [${reason}]`, token);
        }
      } catch (err) {
        console.log(`> Failed to log disconnect: ${err.message}`);
      }
    });

    // RECONNECT
    socket.on('reconnect', () => {
      console.log(`> User reconnected: ${socket.id}`);
      // socket.emit('requestLastUpdated', { message: 'Send lastUpdated timestamp' });
    });

    // ERROR
    socket.on('error', (err) => {
      logtail.error('Socket error:', err);
    });
  } catch (err) {
    betterErrorLog('> Connection-level error:', err);
  }
});

// Handles sending the missing data to the client
async function handleLastUpdatedValidation(data, socket) {
  try {
    const validationResult = await validateLastUpdated(data);
    const lastUpdated = await getLastUpdated();
    let updatedData;
    let responseData;

    if (validationResult.isEqual === false) {
      updatedData = await getUpdatedMismatchedData(validationResult.mismatchedKeys);
      responseData = {
        isSynced: false,
        lastUpdated,
        updatedData,
        message: 'Ažuriranje podataka u toku',
      };
    } else {
      updatedData = [];
      responseData = {
        isSynced: true,
        message: 'Svi podaci su ažurirani',
      };
    }

    socket.emit('lastUpdatedResponse', responseData);
  } catch (err) {
    betterErrorLog(
      '[ERROR][file: www][method: handleLastUpdatedValidation] error while validating last updated document',
      err
    );
  }
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
