#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('infinity-backend:server');
const http = require('http');
const { validateLastUpdated, getLastUpdated, getUpdatedMismatchedData } = require('../utils/helperMethods');


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
console.log(`> Server started on port ${process.env.PORT || 3000}`);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require("socket.io")(server);
const logtail = require("../utils/logger");
app.locals.io = io;
io.on('connection', (socket) => {
  console.log(`> User connected: ${socket.id}`);
  socket.emit('requestLastUpdated', { message: 'Send lastUpdated data' });

  // LAST UPDATED CHECK
  socket.on('lastUpdated', (lastUpdatedData) => {
    // Method that validates all the dates and returns the missing data
    handleLastUpdatedValidation(lastUpdatedData, socket);
  });

  // DISCONNECT 
  socket.on('disconnect', (reason) => {
    console.log(`> User disconnected: ${socket.id} - Reason: ${reason}`);
  });

  // RECONNECT
  socket.on('reconnect', () => {
    console.log(`> User reconnected: ${socket.id}`);
    // socket.emit('requestLastUpdated', { message: 'Send lastUpdated timestamp' });
  });

  // ERROR
  socket.on('error', (err) => {
    logtail.error('Socket error:', err);
  });
});


// Handles sending the missing data to the client
async function handleLastUpdatedValidation(data, socket){
  const validationResult = await validateLastUpdated(data);
  const lastUpdated = await getLastUpdated();
  let updatedData;
  let responseData;

  if(validationResult.isEqual === false){
    updatedData = await getUpdatedMismatchedData(validationResult.mismatchedKeys); 
    responseData = {
      isSynced: false,
      lastUpdated,
      updatedData,
      message: 'Ažuriranje podataka u toku'
    }

  } else {
    updatedData = [];
    responseData = {
      isSynced: true,
      message: 'Svi podaci su ažurirani',
    }
  }
    
  socket.emit('lastUpdatedResponse', responseData);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
